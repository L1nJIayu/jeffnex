# 构建 VitePress 站点并将其部署到 GitHub Pages 的示例工作流程
name: Deploy VitePress site to Pages

on:
  push:
    branches: [main]
  # 可手动点击运行
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 拉代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整git历史
      # 安装pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      # 安装Node
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm
      # 初始化 GitHub Pages 部署的一些环境变量
      - name: Setup Pages
        uses: actions/configure-pages@v4
      # 安装项目依赖
      - name: Install dependencies
        run: pnpm install
      # 打包
      - name: Build with VitePress
        run: pnpm docs:build

      # 这是 GitHub Pages 的兼容性文件，防止 Jekyll 处理你构建后的内容。
      # GitHub Pages 默认会使用 Jekyll 来构建站点，但 VitePress 不需要它，这个文件就是告诉 GitHub “别用 Jekyll”。
      - name: Add .nojekyll file
        run: touch .vitepress/dist/.nojekyll  # 正确的路径
      
      # 把构建好的静态网站内容作为“工件”（artifact）上传，以供下一个 job（deploy）使用。
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .vitepress/dist  # 修正路径

  # 部署工作
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
